---
- name: Setup Ec2 stack
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import Variables
      include_vars: vars/output_vars.yml

    - name: Import Variables for stack
      include_vars: vars/stacksetup.yml 

    - name: Create ec2 key
      ec2_key:
        name: stack-key
        region: "{{ region }}"
      register: stackkey_out

    - name: Save private key 
      copy:
        content: "{{stackkey_out.key.private_key}}"
        dest: "./loginkey.pem"
        mode: 0600
      when: stackkey_out.changed 

    - name: Create security group for LB
      ec2_group:
        name: elb-sg
        description: Allow port 80 from everywhere
        region: "{{ region }}" 
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: elbsg_out

    - name: Create security group for ec2
      ec2_group:
        name: ec-sg
        description: Allow port 22 from everywhere
        region: "{{ region }}" 
        vpc_id: "{{ vpc_id }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{elbsg_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id:: "{{bastionsgid}}" 
      register: ec2_out

    - name: Update sg with itw own sgid
      ec2_group:
        name: ec-sg
        description: Allow port 22 from everywhere
        region: "{{ region }}" 
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: all
            group_id:: "{{ec2_out.group_id}}"
      register: updateecsg_out

    - name: Creating Nginx host 
      ec2:
        key_name: stack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01"
          Project: Ansible
          Owner: Devops team
        exact_count: 1
        count_tag:
          Name: "web01"
          Project: Ansible
          Owner: Devops team
        group_id: "{{ec2_out.group_id}}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: web01_out 

    - name: Creating Tomcat host 
      ec2:
        key_name: stack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01"
          Project: Ansible
          Owner: Devops team
        exact_count: 1
        count_tag:
          Name: "app01"
          Project: Ansible
          Owner: Devops team
        group_id: "{{ec2_out.group_id}}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: app01_out

    - name: Creating Memcache host 
      ec2:
        key_name: stack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mc01"
          Project: Ansible
          Owner: Devops team
        exact_count: 1
        count_tag:
          Name: "mc01"
          Project: Ansible
          Owner: Devops team
        group_id: "{{ec2_out.group_id}}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: mc01_out

    - name: Creating RMQ host 
      ec2:
        key_name: stack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rm01"
          Project: Ansible
          Owner: Devops team
        exact_count: 1
        count_tag:
          Name: "rm01"
          Project: Ansible
          Owner: Devops team
        group_id: "{{ec2_out.group_id}}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: rm01_out

    - name: Creating Mssql host 
      ec2:
        key_name: stack-key
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "db01"
          Project: Ansible
          Owner: Devops team
        exact_count: 1
        count_tag:
          Name: "db01"
          Project: Ansible
          Owner: Devops team
        group_id: "{{ec2_out.group_id}}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: rdb1_out 

    - debug:
        var: rdb1_out.tagged_instances[0].id

    - local_action:
        module: ec2_elb_lb
        name: "profile-elb"
        region: "{{ region }}"
        state: present
        instance_ids: 
          - "{{ web01_out.tagged_instances[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{elbsg_out.group_id}}"
        subnets:
          - {{ "pubsub1id" }} 
          - {{ "pubsub2id" }} 
          - {{ "pubsub3id" }} 
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
   
    - name: create hostip list
      blockinfile: 
        path: provision-stack/group_vars/hostip
        backup: yes
        block: |
          web01_ip: {{web01_out.tagged_instances[0].private_ip}}
          app01_ip: {{app01_out.tagged_instances[0].private_ip}}
          mc01_ip: {{mc01_out.tagged_instances[0].private_ip}}
          rm01_ip: {{rmb01_out.tagged_instances[0].private_ip}}
          db01_ip: {{db01_out.tagged_instances[0].private_ip}} 

    - name: Create a key to created directored
      copy:
        src: loginkey.pem
        dest: provision-stack/loginkey.pem
        mode: '0400' 

    - name: create inventory
      blockinfile: 
        path: provision-stack/inventory
        backup: yes
        block: |                      
          web01 ansible_host={{web01_out.tagged_instances[0].private_ip}}
          app01 ansible_host={{app01_out.tagged_instances[0].private_ip}}
          mc01  ansible_host={{mc01_out.tagged_instances[0].private_ip}}
          rm01 ansible_host={{rmb01_out.tagged_instances[0].private_ip}}
          db01 ansible_host={{db01_out.tagged_instances[0].private_ip}} 
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgroup]
          web01

          [appsrvgroup]
          app01

          [mcsrvgroup]
          mc01

          [rmsrvgroup]
          rm01

          [dbsrvgroup]
          db01
          
          [control]
          cntl

          [stackinst: children]
          websrvgroup
          appsrvgroup
          mcsrvgroup
          rmsrvgroup
          dbsrvgroup
          control

          [stackinst: vars]
          ansible_user=ubuntu
          ansible_private_key_file=loginkey.pem
          #ansible_python_interpreter-/usr/bin/python3